/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkgclass.project.db;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author azizg
 */
public class MainForm extends javax.swing.JFrame {
    private String location;
    private int id;
    //private int w_id;
    private int r_id;
    private String email;
    private String name;
    private String capacity;
    private String amount;
    private String productDesc;
    private String rawMaterialDesc;

    private DefaultTableModel dtm;
    FactoryController fk;
    EmployeeController ec;
    WarehouseController wc;
    ProductController pc;
    RawMaterialController rmc;
    SalaryController sc;
    TitleController tc;
    private String currency;
    private int salaryAmount;
    private int employeeId;
    private String titleDesc;
   
    
    

    /**
     * Creates new form dbClass
     */
    public MainForm() {
        initComponents();
        fk = new FactoryController();
        ec = new EmployeeController();
        wc = new WarehouseController();
        pc = new ProductController();
        rmc = new RawMaterialController();
        sc = new SalaryController();
        tc = new TitleController();
        listFactories();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createBT = new javax.swing.JButton();
        deleteBT = new javax.swing.JButton();
        resetBT = new javax.swing.JButton();
        updateBT = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txtEmp = new javax.swing.JButton();
        txtFactory = new javax.swing.JButton();
        txtEmail = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtEmployeeID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtWarehouse = new javax.swing.JButton();
        txtWarehouseID = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCapacity = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtProducts = new javax.swing.JButton();
        txtProductID = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtProductDesc = new javax.swing.JTextField();
        txtAmount = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtRawMaterial = new javax.swing.JButton();
        txtRawMaterialID = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtRawAmount = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtRawDesc = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtSalary = new javax.swing.JButton();
        txtSalaryID = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtSalaryAmount = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtSalaryCurrency = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtTitleID = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtTitleDesc = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtTitles = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtEname = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        createBT.setText("create");
        createBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBTActionPerformed(evt);
            }
        });

        deleteBT.setText("delete");
        deleteBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTActionPerformed(evt);
            }
        });

        resetBT.setText("clear fields");
        resetBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBTActionPerformed(evt);
            }
        });

        updateBT.setText("update");
        updateBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBTActionPerformed(evt);
            }
        });

        jLabel1.setText("Location");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        jLabel2.setText("Factory Id");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", "related field", "related field"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        txtEmp.setText("employees");
        txtEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmpActionPerformed(evt);
            }
        });

        txtFactory.setText("factories");
        txtFactory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFactoryActionPerformed(evt);
            }
        });

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        jLabel3.setText("Email");

        jLabel4.setText("Employee Id");

        txtWarehouse.setText("warehouses");
        txtWarehouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWarehouseActionPerformed(evt);
            }
        });

        txtWarehouseID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtWarehouseIDActionPerformed(evt);
            }
        });

        jLabel5.setText("Warehouse Id");

        jLabel6.setText("Capacity");

        txtProducts.setText("Products");
        txtProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductsActionPerformed(evt);
            }
        });

        txtProductID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductIDActionPerformed(evt);
            }
        });

        jLabel7.setText("Product ID");

        jLabel8.setText("Product Dsc");

        jLabel9.setText("Amount of Product");

        txtRawMaterial.setText("Raw Materials");
        txtRawMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRawMaterialActionPerformed(evt);
            }
        });

        jLabel10.setText("Raw M. Id");

        jLabel11.setText("Raw M. amount");

        jLabel12.setText("Raw M desc");

        txtSalary.setText("salaries");
        txtSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSalaryActionPerformed(evt);
            }
        });

        jLabel13.setText("Salary Id");

        jLabel14.setText("Salary Amount");

        jLabel15.setText("Currency");

        jLabel16.setText("Title ID");

        txtTitleDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTitleDescActionPerformed(evt);
            }
        });

        jLabel17.setText("Title Desc");

        txtTitles.setText("titles");
        txtTitles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTitlesActionPerformed(evt);
            }
        });

        jLabel18.setText("to crete the RAW MATERIAL, WAREHOUSE ID must be given");

        jLabel19.setText("to create the PRODUCT, WAREHOUSE ID must be given");

        jLabel20.setText("to create the TITILE, EMPLOYEE ID must be given");

        jLabel21.setText("to create the EMLOYEE, FACTORY ID must be given");

        jLabel22.setText("Name");

        jLabel23.setText("to create the WAREHOUSE, FACTORY ID must be gvens");

        jLabel24.setText("to create the SALARY, EMPLOYEE ID must be given");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(txtTitleID, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtProductID, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtProductDesc)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(2, 2, 2)
                                                .addComponent(jLabel8))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(jLabel17)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addComponent(txtTitleDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 285, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(226, 226, 226))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtRawMaterialID, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                                            .addComponent(jLabel2)
                                            .addComponent(txtID))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel11)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(1, 1, 1)
                                                        .addComponent(txtRawAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(32, 32, 32)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel12)
                                                    .addComponent(txtRawDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel1)))
                                    .addComponent(jLabel18)
                                    .addComponent(jLabel19)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5)
                                            .addComponent(txtWarehouseID, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(4, 4, 4)
                                                .addComponent(jLabel6))))
                                    .addComponent(jLabel21)
                                    .addComponent(jLabel24))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtProducts, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTitles, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtWarehouse, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtFactory, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtRawMaterial))
                                .addGap(29, 29, 29)
                                .addComponent(createBT)
                                .addGap(18, 18, 18)
                                .addComponent(updateBT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteBT)
                                .addGap(33, 33, 33)
                                .addComponent(resetBT))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(txtEname, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(txtEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(txtSalaryID, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtSalaryAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(txtSalaryCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(106, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(jLabel23))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFactory, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(createBT, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateBT, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteBT, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resetBT, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(txtRawMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtTitles, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtProducts, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel10)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(txtRawMaterialID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel11)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(txtRawAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtRawDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel16)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtTitleID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel17)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtTitleDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel20)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addGap(12, 12, 12)
                                                .addComponent(txtProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addGap(12, 12, 12)
                                                .addComponent(txtProductDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(16, 16, 16)
                                                .addComponent(txtAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel9))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel19)
                                .addGap(4, 4, 4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSalaryID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSalaryAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtSalaryCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(2, 2, 2)
                                .addComponent(jLabel24)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel22))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21)
                        .addGap(11, 11, 11)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtWarehouse, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtWarehouseID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtCapacity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addGap(31, 31, 31))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23)
                .addGap(308, 308, 308))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTActionPerformed
        // TODO add your handling code here:
        JTableHeader header= jTable1.getTableHeader();
        TableColumnModel colMod = header.getColumnModel();
        TableColumn tabCol0 = colMod.getColumn(0);
        if(tabCol0.getHeaderValue() == "Factory ID"){
            deleteFactories();
            listFactories();
        }else if(tabCol0.getHeaderValue() == "Employee Id"){
            deleteEmployees();
            listEmployee();
        }else if(tabCol0.getHeaderValue() == "Warehouse Id"){
            deleteWarehouse();
            listWarehouses();
        }else if(tabCol0.getHeaderValue() == "Product Id"){
            deleteProduct();
            listProducts();
        }else if(tabCol0.getHeaderValue() == "RawMaterial Id"){
            deleteRawMaterial();
            listRawMaterials();
        }else if(tabCol0.getHeaderValue() == "Salary Id"){
            deleteSalary();
            listSalaries();
        }else if(tabCol0.getHeaderValue() == "Title Id"){
            deleteTitle();
            listTitles();
        }else{
             JOptionPane.showMessageDialog(this, "you didnt select factory table?");
        }
    }//GEN-LAST:event_deleteBTActionPerformed

    private void createBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBTActionPerformed
        // TODO add your handling code here:
        JTableHeader header= jTable1.getTableHeader();
        TableColumnModel colMod = header.getColumnModel();
        TableColumn tabCol0 = colMod.getColumn(0);
        if(tabCol0.getHeaderValue() == "Factory ID"){
            createFactories();
            listFactories();
        }else if(tabCol0.getHeaderValue() == "Employee Id"){
            createEmployee();
            listEmployee();
        }else if(tabCol0.getHeaderValue() == "Warehouse Id"){
            createWarehouse();
            listWarehouses();
        }else if(tabCol0.getHeaderValue() == "Product Id"){
            createProducts();
            listProducts();
        }else if(tabCol0.getHeaderValue() == "RawMaterial Id"){
            createRawMaterials();
            listRawMaterials();
        }else if(tabCol0.getHeaderValue() == "Salary Id"){
            createSalaries();
            listSalaries();
        }else if(tabCol0.getHeaderValue() == "Title Id"){
            createTitles();
            listTitles();
        }else{
             JOptionPane.showMessageDialog(this, "you didnt select factory table?");
        }
    }//GEN-LAST:event_createBTActionPerformed

    private void resetBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBTActionPerformed
        // TODO add your handling code here:
        clearTextFileds();
        
    }//GEN-LAST:event_resetBTActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        tableClicked();
    }//GEN-LAST:event_jTable1MouseClicked

    private void updateBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBTActionPerformed
        // TODO add your handling code here:
        JTableHeader header= jTable1.getTableHeader();
        TableColumnModel colMod = header.getColumnModel();
        TableColumn tabCol0 = colMod.getColumn(0);
        if(tabCol0.getHeaderValue() == "Factory ID"){
            updateFactories();
            listFactories();
        }else if(tabCol0.getHeaderValue() == "Employee Id"){
            updateEmployees();
            listEmployee();
        }else if(tabCol0.getHeaderValue() == "Warehouse Id"){
            updateWarehouses();
            listWarehouses();
        }else if(tabCol0.getHeaderValue() == "Product Id"){
            updateProducts();
            listProducts();
        }else if(tabCol0.getHeaderValue() == "RawMaterial Id"){
            updateRawMaterials();
            listRawMaterials();
        }else if(tabCol0.getHeaderValue() == "Salary Id"){
            updateSalaries();
            listSalaries();
        }else if(tabCol0.getHeaderValue() == "Title Id"){
            updateTitles();
            listTitles();
        }else{
             JOptionPane.showMessageDialog(this, "you didnt select factory table?");
        }
    }//GEN-LAST:event_updateBTActionPerformed

    private void txtEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmpActionPerformed
        // TODO add your handling code here:   
        listEmployee();
        clearTextFileds();
    }//GEN-LAST:event_txtEmpActionPerformed

    private void txtFactoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFactoryActionPerformed
        // TODO add your handling code here:
        listFactories();
        clearTextFileds();
    }//GEN-LAST:event_txtFactoryActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtWarehouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWarehouseActionPerformed
        // TODO add your handling code here:
        listWarehouses();
        clearTextFileds();
    }//GEN-LAST:event_txtWarehouseActionPerformed

    private void txtWarehouseIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtWarehouseIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtWarehouseIDActionPerformed

    private void txtProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductsActionPerformed
        // TODO add your handling code here:
        listProducts();
        clearTextFileds();
    }//GEN-LAST:event_txtProductsActionPerformed

    private void txtRawMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRawMaterialActionPerformed
        // TODO add your handling code here:
        listRawMaterials();
        clearTextFileds();
    }//GEN-LAST:event_txtRawMaterialActionPerformed

    private void txtSalaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSalaryActionPerformed
        // TODO add your handling code here:
        listSalaries();
        clearTextFileds();
    }//GEN-LAST:event_txtSalaryActionPerformed

    private void txtTitleDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTitleDescActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTitleDescActionPerformed

    private void txtTitlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTitlesActionPerformed
        // TODO add your handling code here:
        listTitles();
        clearTextFileds();
    }//GEN-LAST:event_txtTitlesActionPerformed

    private void txtProductIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductIDActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new MainForm().setVisible(true);
                //new LoginForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createBT;
    private javax.swing.JButton deleteBT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton resetBT;
    private javax.swing.JTextField txtAmount;
    private javax.swing.JTextField txtCapacity;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JButton txtEmp;
    private javax.swing.JTextField txtEmployeeID;
    private javax.swing.JTextField txtEname;
    private javax.swing.JButton txtFactory;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtProductDesc;
    private javax.swing.JTextField txtProductID;
    private javax.swing.JButton txtProducts;
    private javax.swing.JTextField txtRawAmount;
    private javax.swing.JTextField txtRawDesc;
    private javax.swing.JButton txtRawMaterial;
    private javax.swing.JTextField txtRawMaterialID;
    private javax.swing.JButton txtSalary;
    private javax.swing.JTextField txtSalaryAmount;
    private javax.swing.JTextField txtSalaryCurrency;
    private javax.swing.JTextField txtSalaryID;
    private javax.swing.JTextField txtTitleDesc;
    private javax.swing.JTextField txtTitleID;
    private javax.swing.JButton txtTitles;
    private javax.swing.JButton txtWarehouse;
    private javax.swing.JTextField txtWarehouseID;
    private javax.swing.JButton updateBT;
    // End of variables declaration//GEN-END:variables
    //factories
    public void listFactories(){
        try {
            dtm = (DefaultTableModel)jTable1.getModel(); 
            dtm.setRowCount(0);
            fk.select(dtm);
            jTable1.setModel(dtm);
            JTableHeader header= jTable1.getTableHeader();
            TableColumnModel colMod = header.getColumnModel();
            TableColumn tabCol0 = colMod.getColumn(0);
            TableColumn tabCol1 = colMod.getColumn(1);
            TableColumn tabCol2 = colMod.getColumn(2);
            TableColumn tabCol3 = colMod.getColumn(3);
            tabCol0.setHeaderValue("Factory ID");
            tabCol1.setHeaderValue("Factory Location");
            tabCol2.setHeaderValue("");
            tabCol3.setHeaderValue("");
            header.repaint();
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void createFactories(){
        if(txtName.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "all the fileds must be filled.!");
        }else{
            try {
                location = txtName.getText();
                fk.create(location);
                JOptionPane.showMessageDialog(this, "new item inserted to the DATABASE");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public void clearTextFileds(){
        txtID.setText("");
        txtName.setText("");
        txtEmail.setText("");
        txtEmployeeID.setText("");
        txtWarehouseID.setText("");
        txtCapacity.setText("");
        txtRawMaterialID.setText("");
        txtRawAmount.setText("");
        txtRawDesc.setText("");
        txtTitleID.setText("");
        txtTitleDesc.setText("");
        txtAmount.setText("");
        txtProductID.setText("");
        txtProductDesc.setText("");
        txtSalaryID.setText("");
        txtSalaryAmount.setText("");
        txtSalaryCurrency.setText("");
        txtEmployeeID.setText("");
        txtEmail.setText("");
        txtWarehouseID.setText("");
        txtCapacity.setText("");
    }
    //delete this function   
    public void deleteFactories(){
        if(txtID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtID.getText());
            try {
                fk.delete(id);
                JOptionPane.showMessageDialog(this, "one record deleted.!");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    public void updateFactories() {
        if(txtID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtID.getText());
            location = txtName.getText();
            try {
                fk.update(id, location);
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(this, "updated succesfully.!");
        } 
    }
    
    public void tableClicked(){
        JTableHeader header= jTable1.getTableHeader();
        TableColumnModel colMod = header.getColumnModel();
        TableColumn tabCol0 = colMod.getColumn(0);
        if(tabCol0.getHeaderValue() == "Factory ID"){
            txtID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
            txtName.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
        }else if(tabCol0.getHeaderValue() == "Employee Id"){
            txtID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
            txtName.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
            txtEmail.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
            txtEmployeeID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
        }else if(tabCol0.getHeaderValue() == "Warehouse Id"){
            txtCapacity.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
            txtID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
            txtWarehouseID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
            
        }else if(tabCol0.getHeaderValue() == "Product Id"){
            txtProductID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
            txtWarehouseID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
            txtProductDesc.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString()); 
            txtAmount.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());            
        }else if(tabCol0.getHeaderValue() == "RawMaterial Id"){
            txtRawMaterialID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
            txtWarehouseID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
            txtRawDesc.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString()); 
            txtRawAmount.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());            
        }else if(tabCol0.getHeaderValue() == "Salary Id"){
            txtSalaryID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
            txtEmployeeID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
            txtSalaryAmount.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString()); 
            txtSalaryCurrency.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());            
        }else if(tabCol0.getHeaderValue() == "Title Id"){
            txtTitleID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 0).toString());
            txtEmployeeID.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
            txtTitleDesc.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString()); 
        }else{
             JOptionPane.showMessageDialog(this, "you didnt select factory table?");
        }
    }
    //employee
    public void listEmployee(){
         try {
            dtm = (DefaultTableModel)jTable1.getModel();
            dtm.setRowCount(0);
            ec.select(dtm);
            jTable1.setModel(dtm);
            JTableHeader header= jTable1.getTableHeader();
            TableColumnModel colMod = header.getColumnModel();
            TableColumn tabCol0 = colMod.getColumn(0);
            TableColumn tabCol1 = colMod.getColumn(1);
            TableColumn tabCol2 = colMod.getColumn(2);
            TableColumn tabCol3 = colMod.getColumn(3);
            tabCol0.setHeaderValue("Employee Id");
            tabCol1.setHeaderValue("Factory Id");
            tabCol2.setHeaderValue("Name");
            tabCol3.setHeaderValue("Email");
            header.repaint();
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void deleteEmployees(){
        if(txtEmployeeID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtEmployeeID.getText());
            try {
                ec.delete(id);
                JOptionPane.showMessageDialog(this, "one record deleted.!");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void createEmployee(){
        if(txtID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Factory ID must be given");
        }else{
            try {
                id = Integer.parseInt(txtID.getText()); 
                email = txtEmail.getText();
                name = txtEname.getText();
                ec.create(name, email, id);
                JOptionPane.showMessageDialog(this, "new item inserted to the database");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void updateEmployees() {
        if(txtID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtEmployeeID.getText()); 
            email = txtEmail.getText();
            name = txtName.getText();
            try {
                ec.update(id, name, email);
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(this, "updated succesfully.!");
        } 
    }
    //warehouse 
    public void listWarehouses(){
         try {
            dtm = (DefaultTableModel)jTable1.getModel();
            dtm.setRowCount(0);
            wc.select(dtm);
            jTable1.setModel(dtm);
            JTableHeader header= jTable1.getTableHeader();
            TableColumnModel colMod = header.getColumnModel();
            TableColumn tabCol0 = colMod.getColumn(0);
            TableColumn tabCol1 = colMod.getColumn(1);
            TableColumn tabCol2 = colMod.getColumn(2);
            TableColumn tabCol3 = colMod.getColumn(3);
            tabCol0.setHeaderValue("Warehouse Id");
            tabCol1.setHeaderValue("Factory Id");
            tabCol2.setHeaderValue("Capacity");
            header.repaint();
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void deleteWarehouse(){
        if(txtWarehouseID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtWarehouseID.getText());
            try {
                wc.delete(id);
                JOptionPane.showMessageDialog(this, "one record is deleted.!");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void createWarehouse(){
        if(txtID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "all the fileds must be filled.!");
        }else{
            try {
                id = Integer.parseInt(txtID.getText()); 
                capacity = txtCapacity.getText();
                wc.create(id, capacity);
                JOptionPane.showMessageDialog(this, "new item inserted to the database");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void updateWarehouses() {
        if(txtWarehouseID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtWarehouseID.getText()); 
            capacity = txtCapacity.getText();
            try {
                wc.update(id,capacity);
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(this, "updated succesfully.!");
        } 
    }
    //products
    public void listProducts(){
         try {
            dtm = (DefaultTableModel)jTable1.getModel();
            dtm.setRowCount(0);
            pc.select(dtm);
            jTable1.setModel(dtm);
            JTableHeader header= jTable1.getTableHeader();
            TableColumnModel colMod = header.getColumnModel();
            TableColumn tabCol0 = colMod.getColumn(0);
            TableColumn tabCol1 = colMod.getColumn(1);
            TableColumn tabCol2 = colMod.getColumn(2);
            TableColumn tabCol3 = colMod.getColumn(3);
            tabCol0.setHeaderValue("Product Id");
            tabCol1.setHeaderValue("Warehouse Id");
            tabCol2.setHeaderValue("Product Description");
            tabCol3.setHeaderValue("Amount");
            header.repaint();
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void createProducts(){
        if(txtWarehouseID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "all the fileds must be filled.!");
        }else{
            try {
                id = Integer.parseInt(txtWarehouseID.getText()); 
                amount = txtCapacity.getText();
                productDesc = txtProductDesc.getText();
                pc.create(id,productDesc,amount);
                JOptionPane.showMessageDialog(this, "new item inserted to the database");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void deleteProduct(){
        if(txtWarehouseID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "add the WAREHOUSE ID");
        }else{
            id = Integer.parseInt(txtWarehouseID.getText());
            try {
                pc.delete(id);
                JOptionPane.showMessageDialog(this, "one record is deleted.!");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void updateProducts() {
        if(txtProductID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtProductID.getText()); 
            productDesc = txtProductDesc.getText();
            amount = txtAmount.getText();
            try {
                pc.update(id,productDesc,amount);
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(this, "updated succesfully.!");
        } 
    }
    //Raw Mterials
    public void listRawMaterials(){
         try {
            dtm = (DefaultTableModel)jTable1.getModel();
            dtm.setRowCount(0);
            rmc.select(dtm);
            jTable1.setModel(dtm);
            JTableHeader header= jTable1.getTableHeader();
            TableColumnModel colMod = header.getColumnModel();
            TableColumn tabCol0 = colMod.getColumn(0);
            TableColumn tabCol1 = colMod.getColumn(1);
            TableColumn tabCol2 = colMod.getColumn(2);
            TableColumn tabCol3 = colMod.getColumn(3);
            tabCol0.setHeaderValue("RawMaterial Id");
            tabCol1.setHeaderValue("Warehouse Id");
            tabCol2.setHeaderValue("RawMaterial Description");
            tabCol3.setHeaderValue("Amount");
            header.repaint();
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void createRawMaterials(){
        if(txtWarehouseID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "add the WAREHOUSE ID");
        }else{
            try {
                rawMaterialDesc = txtRawDesc.getText();
                amount = txtRawAmount.getText();                
                id = Integer.parseInt(txtWarehouseID.getText()); 
                rmc.create(rawMaterialDesc,amount,id);
                JOptionPane.showMessageDialog(this, "new item inserted to the database");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void deleteRawMaterial(){
        if(txtRawMaterialID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtRawMaterialID.getText());
            try {
                rmc.delete(id);
                JOptionPane.showMessageDialog(this, "one record is deleted.!");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void updateRawMaterials() {
        if(txtRawMaterialID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtRawMaterialID.getText()); 
            rawMaterialDesc = txtRawDesc.getText();
            amount = txtRawAmount.getText();
            r_id = Integer.parseInt(txtRawMaterialID.getText());
            try {
                rmc.update(id,rawMaterialDesc,amount,r_id);
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(this, "updated succesfully.!");
        } 
    }
    //salary
    public void listSalaries(){
        try {
            dtm = (DefaultTableModel)jTable1.getModel();
            dtm.setRowCount(0);
            sc.select(dtm);
            jTable1.setModel(dtm);
            JTableHeader header= jTable1.getTableHeader();
            TableColumnModel colMod = header.getColumnModel();
            TableColumn tabCol0 = colMod.getColumn(0);
            TableColumn tabCol1 = colMod.getColumn(1);
            TableColumn tabCol2 = colMod.getColumn(2);
            TableColumn tabCol3 = colMod.getColumn(3);
            tabCol0.setHeaderValue("Salary Id");
            tabCol1.setHeaderValue("Employee Id");
            tabCol2.setHeaderValue("Amount");
            tabCol3.setHeaderValue("Currency");
            header.repaint();
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void createSalaries(){
        if(txtEmployeeID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "add the EMLOYEE ID");
        }else{
            try {
                salaryAmount = Integer.parseInt(txtSalaryAmount.getText());               
                currency = txtSalaryCurrency.getText();
                employeeId = Integer.parseInt(txtEmployeeID.getText());
                sc.create(salaryAmount,currency,employeeId);
                JOptionPane.showMessageDialog(this, "new item inserted to the database");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void deleteSalary(){
        if(txtSalaryID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtSalaryID.getText());
            try {
                sc.delete(id);
                JOptionPane.showMessageDialog(this, "one record is deleted.!");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void updateSalaries() {
        if(txtSalaryID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtSalaryID.getText()); 
            amount = txtSalaryAmount.getText();
            currency = txtSalaryCurrency.getText();
            try {
                sc.update(id,amount,currency);
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(this, "updated succesfully.!");
        } 
    }
    //titles
    public void listTitles(){
        try {
            dtm = (DefaultTableModel)jTable1.getModel();
            dtm.setRowCount(0);
            tc.select(dtm);
            jTable1.setModel(dtm);
            JTableHeader header= jTable1.getTableHeader();
            TableColumnModel colMod = header.getColumnModel();
            TableColumn tabCol0 = colMod.getColumn(0);
            TableColumn tabCol1 = colMod.getColumn(1);
            TableColumn tabCol2 = colMod.getColumn(2);
            TableColumn tabCol3 = colMod.getColumn(3);
            tabCol0.setHeaderValue("Title Id");
            tabCol1.setHeaderValue("Employee Id");
            tabCol2.setHeaderValue("Title Description");
            header.repaint();
        } catch (SQLException ex) {
            Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void createTitles(){
        if(txtEmployeeID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "add the EMLOYEE ID");
        }else{
            try {
                titleDesc = txtTitleDesc.getText();
                employeeId = Integer.parseInt(txtEmployeeID.getText());
                tc.create(titleDesc,employeeId);
                JOptionPane.showMessageDialog(this, "new item inserted to the database");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void deleteTitle(){
        if(txtTitleID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtTitleID.getText());
            try {
                tc.delete(id);
                JOptionPane.showMessageDialog(this, "one record is deleted.!");
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void updateTitles() {
        if(txtTitleID.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "nothing is selected to delete");
        }else{
            id = Integer.parseInt(txtTitleID.getText()); 
            titleDesc = txtTitleDesc.getText();
            try {
                tc.update(id,titleDesc);
            } catch (SQLException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(this, "updated succesfully.!");
        } 
    }
}